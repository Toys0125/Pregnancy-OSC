name: Release Rust Binaries

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Get version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build binary
        run: cargo build --release

      - name: Rename artifact
        run: |
          mkdir artifacts
          BINARY_NAME=$(basename $(pwd))
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/${BINARY_NAME}.exe artifacts/${BINARY_NAME}-windows.exe
          else
            cp target/release/${BINARY_NAME} artifacts/${BINARY_NAME}-linux
          fi
        shell: bash

      - name: Upload artifact for workflow
        uses: actions/upload-artifact@v4
        with:
          name: release-binaries-${{ matrix.os }}
          path: artifacts/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.cargo_version.outputs.version }}
          name: Release v${{ steps.cargo_version.outputs.version }}
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
